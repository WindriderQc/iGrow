<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="Data Farming App">
    <meta name="author" content="SpecialBlend Production">
    <title>ðŸ’» Database Request ðŸ’»</title>
    <link rel="shortcut icon" href="/img/favicon2.ico" type="image/x-icon">
    
    <!-- jQuery first, then Popper.js, then Bootstrap JS & CSS-->
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"  integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="  crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/js/bootstrap.bundle.js"></script>
    
    <!-- Custom fonts for this template-->
    <script src="https://kit.fontawesome.com/195e82b473.js" crossorigin="anonymous"></script>
    
    <!-- Custom styles for this template-->
    <link rel="stylesheet"   type="text/css"  href="css/sb-admin.css" >
        <link rel="stylesheet" href="/css/serverClientStyles.css">


    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.9.0/p5.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.9.0/addons/p5.dom.min.js"></script>
       
    <script src="https://cdn.jsdelivr.net/npm/moment@latest/moment.min.js"></script>
    

</head>

<body class="fixed-nav sticky-footer bg-light sidenav-toggled" id="page-top">
  
<%- include('partials/nav') %> 
    
<div class="content-wrapper">
<div class="container-fluid bg-3">  
         
        


    <header>
        <h1 class="title">ðŸ’» Server stats ðŸ’»</h1>
    </header>
    <select class="mx-2 form-control" id="collection_select" onchange=dbSelect.updateSelected()></select>
    <form> 
        <input type='number' id='skip_id' name="skip" value=0>
        <input type='number' id='limit_id' name="limit" value=10>
        <input type='text' id='sort_id' name = "sort" value="desc">
        <input type="hidden" id="collection_id" name="collection" value="">
        <input type='button'  class="btn btn-primary" value="Send Request" onclick=sendRequest()>
    </form>


    <main>
        <div class="error-message">   </div>
        <div class="boots">           </div>
        
        <div class="button-container">
        <p id="loadMore">Loading...</p>
        </div>
        <div class="loading">
        <img src="/img/loading.gif" alt="">
        </div>
    </main>

</div>
</div>

<script>



console.log('server stats!')

const errorElement = document.querySelector('.error-message')
const loadingElement = document.querySelector('.loading')
const bootsElement = document.querySelector('.boots')
const loadMoreElement = document.querySelector('#loadMore')
const DATA_API =  'http://192.168.0.33:3001'   //IGROW_IP   // TODO: recevoir du server ejs

let skip = 0;
let limit = 30;    //   TODO:  si le limit est plus petit que window et y apas de scroll....   le scroll event launch pas
let loading = false;
let finished = false;




class DBSelecter {
    constructor(collectionList, collectionSelected, html_dom, onChangeCallback = null ) 
    {
        this.selectDom = html_dom
        this.collectionList = collectionList
        this.selectElm = document.getElementById(html_dom)
        this.changeCallback = onChangeCallback ?  onChangeCallback  :  null

        if(this.collectionList.length != 0) {

            for(let col in this.collectionList) {
                this.selectElm.options[this.selectElm.options.length] = new Option(this.collectionList[col], col)
            }

            let index = this.collectionList.indexOf(collectionSelected)
            this.selectElm.options[index].selected = "true"
            this.selectedCollection = this.getSelectText()
            console.log("Setting selected: " + this.selectedCollection)
        }  
        else  console.log('no Collection list')   
        
    }


    getSelectText()
    {
        //this.selectedCollection = select.options[selectedOption].text
        let txt = $("#" + this.selectDom + ">option:selected").text()
        return txt
    }


    updateSelected()
    { 
        this.selectedCollection = this.getSelectText()
        console.log("Selecting: " + this.selectedCollection)

        if(this.changeCallback) this.changeCallback()  
    }




}







let dbList = JSON.parse('<%- collectionList %>')
let colList = []

console.log(dbList)

dbList.forEach((db) => {
    colList.push(db.name)
})

let selectedDb = colList[0]  // select first collection of array by default
console.log({colList, selectedDb})


let dbSelect = new DBSelecter(colList, selectedDb,  "collection_select")
listAll(selectedDb, true)


//  Button activated update - collection list display upon query params in gui
function sendRequest() {
    listAll(dbSelect.selectedCollection, true)
}




errorElement.style.display = 'none';

document.addEventListener('scroll' ,() => {
    const rect = loadMoreElement.getBoundingClientRect();
    if (rect.top < window.innerHeight && !loading && !finished) {
        loadMore();
    }
})




function loadMore() {
        skip += limit;
        listAll(null, false)
}

async function listAll( selectedCollection, reset = true) {
    loading = true;
    if (reset) {
        console.log('reset')
        bootsElement.innerHTML = ''
        skip = 0;
        finished = false;
    }

  
    const params = {
        skip: document.getElementById('skip_id').value, 
        limit: document.getElementById('limit_id').value, 
        sort: document.getElementById('sort_id').value, 
        collection: selectedCollection ? selectedCollection : ""
    }
    const url = `${DATA_API}/database/list?skip=${params.skip}&limit=${params.limit}&sort=${params.sort}&collection=${params.collection}`
    console.log(url)

    const response = await fetch(url)
    const result = await response.json()
    
    console.log(result.data)

    if(result.data) {
        result.data.forEach(log => {
                const div = document.createElement('div')

                const header = document.createElement('h5')
                header.className = header.className + " my-3"
            //  header.textContent = log.email ? log.email : log._id//log.name;
                header.textContent = log._id

                const text = document.createElement('small')
                text.textContent = JSON.stringify(log)//new Date(log.date)


                div.appendChild(header)
                div.appendChild(text)

                bootsElement.appendChild(div)
            })

        loadingElement.style.display = 'none'
        console.log(result.meta.has_more ? "has more" : "done")
        if (!result.meta.has_more) {
            loadMoreElement.style.visibility = 'hidden'
            finished = true
        } else {
            loadMoreElement.style.visibility = 'visible'
        }
    }

    loading = false
    




}








</script>


</body>
</html>
